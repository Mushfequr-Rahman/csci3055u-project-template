class Student{
  var favorite: String = ""
  var num_courses : Int = 0

  init(course_name: String, num_courses: Int)
  {
    self.favorite=course_name
    self.num_courses=num_courses
  }

  func Describe_Student() -> String {
    return "The students favorite course is \(favorite) and he has \(num_courses) courses"
  }
}

let student = Student(course_name:"CSCI 3055",num_courses:5)
print(student.Describe_Student()) //=> The students favoritte course is CSCI 3055 and he has 5 courses


/*
Because Swift is based on Objective-C, it supports struct as well,
one of the difference between struct and classes it that classes
are pased by refernce while structs are passed as values
*/

struct student_id{
  var Student_ID: String = ""

  func Describe_Student() -> String {
    return "The Student ID is \(Student_ID)"
  }
}
 let Mushfequr = student_id(Student_ID : "567890")
 print(Mushfequr.Describe_Student())  //=> Mushys-MacBook-Air:Final_project mustafizur$

var My_List=[5, 6, 7,8]
var My_Hashmap: [String:String] = ["Jordan":"Basketball Player",
"Alex" :"Astrologist"];

print(My_List)  //=> [5, 6, 7, 8]
print(My_Hashmap["Jordan"] as Any) //=> Optional("Basketball Player") 
//any  is used to force the compiler to recognize that any varible might be passed 
//Optional exists in the output as  the return variable might be empty

/* 
 Just like any modern Language, we can implement the map,filter and reduce funtions to our 
 data structures,
 For example:
 */
 
 let product_of_two = my_list.map( my_list return my_list*2)
 
 /* we can call the sorted functiongs from the standard libray to sort our list painlessly and quickly  */
 let sorted_list=my_list.sorted()
 
 /* 
 Now we are going to look at some implementations of standard library protocols that help us in designing our code
 For example some of them are debugPrint,debugDescription that print out description of the variable to help us with
 our debugging.
 
 */
 
 //Below we have an example of this:
 
 //We create a data structure of DateIndex.
 struct DateIndex {
    let date: Date
}
 
//Here we see an example of closure in the Swift Languuage where we implement
//Calender using the data DataStrcutre within the scope of Calender.
let calendar = Calendar.current
extension DateIndex {
    init(_ date: Date) {
        self.date = calendar.startOfDay(for: date)
    }
}

let dateFormatter = DateFormatter()
dateFormatter.dateFormat = DateFormatter.dateFormat(fromTemplate: "MMMM d", options: 0, locale: .current)

//Here we use the protocol CustomDebugStringConvertible to implement an extension of dataFormattter function
//such that it returns a debug description of the String that we are converting to data.
extension DateIndex: CustomDebugStringConvertible {
    var debugDescription: String {
        return dateFormatter.string(from: date)
    }
}
 
